name: "[PUSH] Deploy to UAT"
on:
  workflow_dispatch:
  push:
    branches:
      - uat
    paths:
      - "force-app/**"
jobs:
  Create-package:
    name: Create new package
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate prod
      - name: Authenticate prod
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt
          
      # Authenticate uat sandbox
      - name: Authenticate uat sandbox
        run: |
          echo ${{ secrets.UAT_SFDX_URL}} > ./UAT_SFDX_URL.txt
          sfdx auth:sfdxurl:store -f ./UAT_SFDX_URL.txt -a uat -s
          rm -f ./UAT_SFDX_URL.txt
          
       # Delete unpackagable and scratch-org folder
      - name: Delete unpackagable
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy
          rm -rf ./force-app/scratch-org
          
      # Create package version
      - name: Create package version
        id: package-version-create
        run: |
          sfdx force:package:version:create --skipvalidation -f config/project-scratch-def.json -p $(cat sfdx-project.json | jq '.packageDirectories | map(select(.package != null))[0].package' -r) -k ${{ secrets.PACKAGE_KEY }} -w 90 --json | tee output
          if [ $(cat output |jq '.status') == "1" ]; then
            exit 125
          fi
          packageId=$(cat output | jq -r '.result.SubscriberPackageVersionId')
          echo "::set-output name=packageId::$(echo $packageId)"
          echo
          echo Package ID: $packageId
    outputs:
      packageId: ${{ steps.package-version-create.outputs.packageId }}
          
  Install-package:
    name: Install package
    runs-on: ubuntu-latest
    steps:
       # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate prod
      - name: Authenticate prod
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt
          
      # Authenticate uat sandbox
      - name: Authenticate uat sandbox
        run: |
          echo ${{ secrets.UAT_SFDX_URL}} > ./UAT_SFDX_URL.txt
          sfdx auth:sfdxurl:store -f ./UAT_SFDX_URL.txt -a uat -s
          rm -f ./UAT_SFDX_URL.txt
          
      # Install sfpowerkit plugin used to install multiple packages only by version number
      - name: Install sfpowerkit plugin
        run: echo y | sfdx plugins:install sfpowerkit@2.0.1

      # Get package keys
      - name: Get package keys
        id: install-keys
        run: |
          keys=""
          for p in $(jq '.result | .[].Name' -r <<< "$(sfdx force:package:list --json)"); do
              keys+=$p":${{ secrets.PACKAGE_KEY }} "
          done
          echo "::set-output name=keys::$(echo $keys)"
      # Install packages this repo is dependant on
      - name: Install dependant packages
        run: sfdx sfpowerkit:package:dependencies:install -u uat -r -a -w 60 -k '${{ steps.install-keys.outputs.keys }}'
          
      # Install new package version into UAT
      - name: Install new package version into UAT
        id: uat-installation
        run: |
          sfdx force:package:install --package ${{ needs.create-package.outputs.packageId }} -w 20 -b 20 -u uat -r -k ${{ secrets.PACKAGE_KEY }} --json | tee output
