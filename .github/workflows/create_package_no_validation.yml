name: "[PUSH] Create Package No Validation"
on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - "force-app/**"
jobs:
  # ################################################################# #
  # ######################## CREATE PACKAGE ######################### #
  # ################################################################# #
  create-package:
    name: Create Package
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate prod
      - name: Authenticate prod
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt

      # Delete unpackagable and scratch-org folder
      - name: Delete unpackagable
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy
          rm -rf ./force-app/scratch-org

      # Create package version
      - name: Create package version
        id: package-version-create
        run: |
          sfdx force:package:version:create --skipvalidation -f config/project-scratch-def.json -p $(cat sfdx-project.json | jq '.packageDirectories | map(select(.package != null))[0].package' -r) -k ${{ secrets.PACKAGE_KEY }} -w 90 -c --json | tee output

          if [ $(cat output |jq '.status') == "1" ]; then
            exit 125
          fi

          packageId=$(cat output | jq -r '.result.SubscriberPackageVersionId')
          echo "::set-output name=packageId::$(echo $packageId)"
          echo "::set-output name=betaVersionNumber::$(cat sfdx-project.json | jq -r '.packageAliases | keys_unsorted[-1]' | sed 's/.*-//')"

          echo
          echo Package ID: $packageId

    outputs:
      packageId: ${{ steps.package-version-create.outputs.packageId }}
      betaVersionNumber: ${{ steps.package-version-create.outputs.betaVersionNumber }}

  # ################################################################# #
  # ####################### VALIDATE IN SIT ######################### #
  # ################################################################# #
  validate-in-sit:
    name: Validate install in SIT Sandbox
    needs: [create-package]
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v2

      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Authenticate prod
      - name: Authenticate prod
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt

      # Authenticate integration-sandbox
      - name: Authenticate integration-sandbox
        run: |
          echo ${{ secrets.INTEGRATION_SANDBOX_SFDX_URL}} > ./INTEGRATION_SANDBOX_SFDX_URL.txt
          sfdx auth:sfdxurl:store -f ./INTEGRATION_SANDBOX_SFDX_URL.txt -a integration-sandbox -s
          rm -f ./INTEGRATION_SANDBOX_SFDX_URL.txt

      # Install new package version into integration org
      - name: Install new package version into integration org
        id: integration-installation
        run: |
          sfdx force:package:install --package ${{ needs.create-package.outputs.packageId }} -w 20 -b 20 -u integration-sandbox -r -k ${{ secrets.PACKAGE_KEY }} --json | tee output

          echo "::set-output name=installOutput::$(cat output | jq '.message')"
          if [ $(cat output | jq '.status') == "0" ]; then
            echo "::set-output name=successfullyInstalled::true"
          fi
    outputs:
      successfullyInstalled: ${{ steps.integration-installation.outputs.successfullyInstalled }}
      installOutput: ${{ steps.integration-installation.outputs.installOutput }}
