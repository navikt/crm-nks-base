public with sharing class NKS_HomePageController {
    @AuraEnabled
    public static string getField(String type) {
        List<NKS_Announcement__c> announcements = new List<NKS_Announcement__c>();
        String res = null;
        try {
            announcements = [
                SELECT Id, NKS_Information__c
                FROM NKS_Announcement__c
                WHERE NKS_TypeFormula__c = :type
                ORDER BY LastModifiedDate DESC
                LIMIT 1
            ];

            if (announcements.size() > 0) {
                NKS_Announcement__c announcement = announcements[0];
                String information = announcement.NKS_Information__c.replace('<img', '<img style="max-height: 100px"');
                res = information;
            }
        } catch (Exception ex) {
            System.debug('Problem getting Information-field for Announcement' + ex.getMessage());
        }
        return res;
    }

    @AuraEnabled
    public static List<Record> getList(
        String title,
        String content,
        String objectName,
        String filter,
        String orderby,
        String limitNumber,
        String datefield,
        Boolean showimage,
        Boolean filterbyskills
    ) {
        List<Record> records = new List<Record>();
        Set<String> userskills = new Set<String>();
        String userId = UserInfo.getUserID();
        if (filterbyskills) {
            userskills = getUserSkills(userId);
        }

        String query = 'SELECT LastModifiedDate, CreatedDate, ' + title;
        if (content != null) {
            query += ' , ' + content;
        }

        if (filterbyskills && objectName == 'NKS_Announcement__c') {
            query += ' , Skills__c ';
        }

        if (
            objectName == 'NKS_Announcement__c' &&
            Schema.SObjectType.NKS_Announcement__c.getRecordTypeInfosByDeveloperName().get('News') != null
        ) {
            query += ' , NKS_News_Pin__c, NKS_News_Publish_Date__c';
        }

        if (objectName == 'Case') {
            query += ' , toLabel(Status)';
        }

        query += ' FROM ' + objectName + ' WHERE ' + filter;

        if (filterbyskills && objectName == 'NKS_Announcement__c' && userskills.size() > 0) {
            String skillstring = '';
            for (String u : userskills) {
                skillstring += '\'' + u.replaceAll('NKS_Skill_', '') + '\',';
            }
            query += ' AND (Skills__c = \'\' OR Skills__c INCLUDES (' + skillstring.removeEnd(',') + '))';
        }

        if (filterbyskills && objectName == 'Knowledge__kav' && userskills.size() > 0) {
            String skillstring = '';
            for (String u : userskills) {
                skillstring += u.replaceAll('NKS_Skill_', '') + '__c ,';
            }
            query += ' WITH DATA CATEGORY Tema__c ABOVE_OR_BELOW (' + skillstring.removeEnd(',') + ')';
        }

        if (orderby != null) {
            query += ' ORDER BY ' + orderby;
        }

        if (limitNumber != null) {
            query += ' LIMIT ' + limitNumber;
        }

        System.debug('QUERY: ' + query);
        List<SObject> listtoreturn = Database.query(query);

        records = createRecords(listtoreturn, objectName, title, content, datefield, showimage);
        return records;
    }

    public class Record {
        @AuraEnabled
        public String recordId;
        @AuraEnabled
        public String name;
        @AuraEnabled
        public String content;
        @AuraEnabled
        public String summary;
        @AuraEnabled
        public Datetime modifiedDate;
        @AuraEnabled
        public String imageurl;
        @AuraEnabled
        public Boolean pin;
        @AuraEnabled
        public Datetime publishDate;
        @AuraEnabled
        public String status;
    }

    private static List<Record> createRecords(
        List<sObject> listofrecords,
        String objectName,
        String title,
        String content,
        String datefield,
        Boolean showimage
    ) {
        List<Record> records = new List<Record>();
        for (sObject r : listofrecords) {
            Record record = new Record();
            record.recordId = r.Id;
            record.name = r.get(title).toString();
            record.modifiedDate = Datetime.valueOf(r.get(datefield));
            if (showimage) {
                record.imageurl = getImageUrl(r.Id);
            }

            if (content != null) {
                record.content = r.get(content).toString().replaceAll('\\<.*?\\>', '');
                if (record.content.length() > 600) {
                    record.summary = record.content.mid(0, 600) + '...';
                } else {
                    record.summary = record.content;
                }
            }

            if (
                objectName == 'NKS_Announcement__c' &&
                Schema.SObjectType.NKS_Announcement__c.getRecordTypeInfosByDeveloperName().get('News') != null
            ) {
                NKS_Announcement__c news = (NKS_Announcement__c) r;
                record.pin = news.NKS_News_Pin__c;
                record.publishDate = Datetime.valueOf(news.NKS_News_Publish_Date__c);
            } else {
                record.pin = false;
                record.publishDate = null;
            }

            if (objectName == 'Case') {
                Case enCase = (Case) r;
                record.status = enCase.Status;
            } else {
                record.status = '';
            }
            records.add(record);
        }
        return records;
    }

    public static String getImageUrl(Id recordId) {
        try {
            ContentDocumentLink cdl = [
                SELECT
                    Id,
                    ContentDocumentId,
                    ContentDocument.LatestPublishedVersionId,
                    ContentDocument.ContentModifiedDate,
                    ContentDocument.FileType
                FROM ContentDocumentLink
                WHERE LinkedEntityId = :recordId
                ORDER BY ContentDocument.ContentModifiedDate DESC
                LIMIT 1
            ];

            String contentversionid = cdl.ContentDocument.LatestPublishedVersionId;
            if (contentversionid != null) {
                if (cdl.ContentDocument.FileType == 'PDF') {
                    return '/sfc/servlet.shepherd/version/renditionDownload?rendition=SVGZ&versionId=' +
                        contentversionid;
                }
                return '/sfc/servlet.shepherd/version/renditionDownload?rendition=ORIGINAL_Png&versionId=' +
                    contentversionid;
            } else {
                System.debug('Cannot fetch any images for Announcement with recordId = ' + recordId);
            }
        } catch (Exception ex) {
            System.debug('Problem getting  image for Annoucement: ' + ex.getMessage());
        }
        return null;
    }

    public static Set<String> getUserSkills(Id userId) {
        Set<String> skills = new Set<String>();
        skills.addAll(getChatSkills(userId));
        skills.addAll(getServiceResourceSkills(userId));
        return skills;
    }

    /**
     * @Get the assigned service resource skills for the given user ID
     * @author Stian Ruud Schikora | 05-10-2022
     * @param userId
     * @return Set<String>
     **/
    public static Set<String> getServiceResourceSkills(Id userId) {
        Set<String> skills = new Set<String>();

        for (ServiceResourceSkill srSkill : [
            SELECT Id, Skill.DeveloperName
            FROM ServiceResourceSkill
            WHERE ServiceResource.RelatedRecordId = :userId
        ]) {
            skills.add(srSkill.Skill.DeveloperName);
        }

        return skills;
    }

    public static Set<String> getChatSkills(Id userId) {
        Set<String> skills = new Set<String>();
        for (Group g : [
            SELECT DeveloperName, Name, Type, Id
            FROM Group
            WHERE
                DeveloperName LIKE 'NKS_Skill_%'
                AND Group.Type = 'Regular'
                AND Id IN (SELECT GroupId FROM GroupMember WHERE UserOrGroupId = :userId)
        ]) {
            skills.add(g.DeveloperName);
        }
        return skills;
    }

    @AuraEnabled
    public static NKS_Announcement__c getCampaign() {
        List<NKS_Announcement__c> campaigns = [
            SELECT
                Id,
                Name,
                NKS_Campaign_Image_Alt__c,
                NKS_ImageURL__c,
                NKS_Campaign_From_Date__c,
                NKS_Campaign_To_Date__c
            FROM NKS_Announcement__c
            WHERE NKS_TypeFormula__c = 'Kampanje' AND NKS_Campaign_To_Date__c >= TODAY
            ORDER BY CreatedDate DESC
            LIMIT 1
        ];
        if (campaigns.size() > 0) {
            NKS_Announcement__c campaign = campaigns[0];
            campaign.NKS_ImageURL__c = getImageUrl(campaign.Id);
            if (campaign.NKS_ImageURL__c != null && campaign.NKS_ImageURL__c != '') {
                return campaign;
            } else {
                System.debug('You may not have uploaded any images for the campaign.');
                return null;
            }
        } else {
            System.debug('The list in empty!');
            return null;
        }
    }

    @AuraEnabled(cacheable=true)
    public static NKS_Announcement__c getNews(Id recordId) {
        NKS_Announcement__c news = [
            SELECT
                Id,
                Name,
                NKS_News_Author__c,
                NKS_News_Other_Authors__c,
                NKS_News_Publish_Date__c,
                LastModifiedDate,
                NKS_Information__c,
                NKS_ImageURL__c
            FROM NKS_Announcement__c
            WHERE Id = :recordId
        ];
        if (news != null) {
            news.NKS_ImageURL__c = getImageUrl(news.Id);
            return news;
        } else {
            System.debug('Record was not found!');
            return null;
        }
    }

    @AuraEnabled
    public static List<Knowledge__kav> getReadyResponses() {
        try {
            List<Knowledge__kav> readyResponses = [
                SELECT Id, Title, LastModifiedDate
                FROM Knowledge__kav
                WHERE Title LIKE 'Felles - Svarberedskap%' AND PublishStatus = 'Online'
                ORDER BY LastModifiedDate DESC
                LIMIT 3
            ];

            if (readyResponses.size() > 0) {
                return readyResponses;
            }
        } catch (Exception ex) {
            System.debug(ex.getMessage());
        }
        return null;
    }

    @invocableMethod(label='Remove HTML Tags')
    public static List<String> removeHtmlTags(List<String> richTextList) {
        String richText = richTextList[0];
        List<String> plainTextList = new List<String>();
        richText = richText.stripHtmlTags();
        plainTextList.add(richText);
        return plainTextList;
    }

    @AuraEnabled(cacheable=true)
    public static Integer countNewsViews(Id recordId) {
        List<Id> originalList = new List<Id>();
        Set<Id> resultList = new Set<Id>();

        try {
            List<NKS_Audit_Log__c> alList = [
                SELECT Id, Name, Announcement__c, User__c, Viewed_date__c
                FROM NKS_Audit_Log__c
                WHERE Announcement__c = :recordId
                ORDER BY CreatedDate DESC
            ];

            if (alList.size() > 0) {
                for (Integer i = 0; i < alList.size(); i++) {
                    originalList.add(alList[i].User__c);
                }

                resultList.addAll(originalList);
                return resultList.size();
            }
        } catch (Exception ex) {
            System.debug(ex.getMessage());
        }
        return null;
    }
}
